# -*- coding: utf-8 -*-
"""OSS_2-2.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1feyCDooBUye0uuh76yGSTePeHijqjoEw
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR

from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
#from sklearn.metrics import accuracy_score
#from sklearn.metrics import confusion_matrix

from sklearn.metrics import mean_squared_error


def sort_dataset(dataset_df):
	#TODO: Implement this function
  # 해당 시즌 기준 , 주어진 데이터 셋이 있다면 오름차순으로 정렬
  data = dataset_df.sort_values(by='year')
  return data

def split_dataset(dataset_df):
	#TODO: Implement this function
  Y = dataset_df['salary']
  Y = Y * 0.001
  X = dataset_df.drop(columns='salary', axis = 1)
  X_train = X.iloc[:1718]
  X_test = X.iloc[1718:]
  y_train = Y.iloc[:1718]
  y_test = Y.iloc[1718:]

  return X_train, X_test, y_train, y_test
  # 직접

def extract_numerical_cols(dataset_df):
	#TODO: Implement this function
  arr = ['age','G','PA','AB','R','H','2B','3B','HR','RBI','SB','CS','BB','HBP','SO','GDP','fly','war']
  return dataset_df[arr]

def train_predict_decision_tree(X_train, Y_train, X_test):
	#TODO: Implement this function
   dt_reg = DecisionTreeRegressor()
   dt_reg.fit(X_train, Y_train)
   predicted = dt_reg.predict(X_test)
   return predicted

def train_predict_random_forest(X_train, Y_train, X_test):
	#TODO: Implement this function
   rf_reg = RandomForestRegressor() # 모델 받아오기
   rf_reg.fit(X_train,Y_train)
   predicted = rf_reg.predict(X_test)
   return predicted

def train_predict_svm(X_train, Y_train, X_test):
	#TODO: Implement this function
  svm_pipe = make_pipeline( StandardScaler(), SVR() )
  svm_pipe.fit(X_train, Y_train)
  return svm_pipe.predict(X_test)

def calculate_RMSE(labels, predictions):
	#TODO: Implement this function
   return np.sqrt(np.mean((predictions - labels) ** 2))

if __name__=='__main__':
	#DO NOT MODIFY THIS FUNCTION UNLESS PATH TO THE CSV MUST BE CHANGED.
	data_df = pd.read_csv('/content/sample_data/2019_kbo_for_kaggle_v2.csv')

	sorted_df = sort_dataset(data_df)
	X_train, X_test, Y_train, Y_test = split_dataset(sorted_df)
	X_train = extract_numerical_cols(X_train)
	X_test = extract_numerical_cols(X_test)

	dt_predictions = train_predict_decision_tree(X_train, Y_train, X_test)
	rf_predictions = train_predict_random_forest(X_train, Y_train, X_test)
	svm_predictions = train_predict_svm(X_train, Y_train, X_test)

	print ("Decision Tree Test RMSE: ", calculate_RMSE(Y_test, dt_predictions))
	print ("Random Forest Test RMSE: ", calculate_RMSE(Y_test, rf_predictions))
	print ("SVM Test RMSE: ", calculate_RMSE(Y_test, svm_predictions))